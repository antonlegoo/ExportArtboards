// Grab all the artboardsvar _abs = app.activeDocument.artboards;// Get the file path of the documentvar _documentPath = app.activeDocument.path;// For each artboardfor( var i=0; i < _abs.length; i++ ){    // Get the properties    var ab = _abs[i];    var filename = ab.name;    var exportPath = _documentPath + "/" + filename;        // Set this Artboard as active    _abs.setActiveArtboardIndex( i );        // Split apart the filePath to find the extension    var partsOfPath = exportPath.split(".");    var pathPart = partsOfPath[0];    var extPart = partsOfPath[1];        // Get the export object based on the extension    var exportObject = this.getExportObjectForExtension( extPart );    // Update the exportPath    var finalPath = pathPart + "." + exportObject.filetype;        // Export    SaveForWebWithOptions( finalPath, exportObject.type, exportObject.options );}// Function for saving as PNGfunction SaveForWebWithOptions( path, type, exportOptions ){    // Create the folders for the file if they don't exist    this.createFoldersForPath( path );        // Export    app.activeDocument.exportFile ( new File( path ), type, exportOptions );}// Function to return options for extension keywordsfunction getExportObjectForExtension( ext ){       // If the extension if undefined, return the default    if( ext == undefined ) return this.getDefaultOptions();        // Find out what file type    var filetype = ext.substr (0, 3);    var flags = ext.substr(3).split("|");    //    if( filetype == "png" ) return this.getOptionsForPNG( flags );    //    if( filetype == "jpg" ) return this.getOptionsForJPG( flags );    //    if( filetype == "gif" ) return this.getOptionsForGIF( flags );        // If we get here for some reason without returning, return default    return this.getDefaultOptions();}// Defaultfunction getDefaultOptions(){ return this.getOptionsForPNG24(); }// PNGfunction getOptionsForPNG( flags ){    if( flags.length > 1 )    {        // Switch on type        switch( flags[1] )        {            case "8":                return this.getOptionsForPNG8();                break;        }    }        return this.getOptionsForPNG24();}function getOptionsForPNG24(){    var exportObject = new Object();        var options = new ExportOptionsPNG24();    options.antiAliasing = false;    options.transparency = true;    options.artBoardClipping = true;        exportObject.type = ExportType.PNG24;    exportObject.options = options;    exportObject.filetype = "png";        return exportObject;}function getOptionsForPNG8(){    var exportObject = new Object();        var options = new ExportOptionsPNG8();       options.artBoardClipping = true;        exportObject.type = ExportType.PNG8;    exportObject.options = options;    exportObject.filetype = "png";        return exportObject;}// JPGfunction getOptionsForJPG( flags ){    var exportObject = new Object();        var defaultQuality = 75;    var options = new ExportOptionsJPEG();    options.qualitySetting = defaultQuality;    options.artBoardClipping = true;        // Account for flags    if( flags.length > 1 )    {        // Normalize and Set        options.qualitySetting = this.normalizeStringToInt( flags[1], 1, 100, defaultQuality );    }    exportObject.type = ExportType.JPEG;    exportObject.options = options;    exportObject.filetype = "jpg";        return exportObject;}// GIFfunction getOptionsForGIF( flags ){    var exportObject = new Object();        var options = new ExportOptionsGIF();    options.artBoardClipping = true;        exportObject.type = ExportType.GIF;    exportObject.options = options;    exportObject.filetype = "gif";        return exportObject;}// Creates folders for a path if it doesn't existfunction createFoldersForPath( path ){    // Create the folder object from path    var lastIndex = path.lastIndexOf ("/");    var folderPath = path.substr( 0, lastIndex );    var folder = new Folder (folderPath);        // If it doesn't exist, create it    if( !folder.exists ) folder.create();}// Normalizes a string value to an intfunction normalizeStringToInt( _string, _min, _max, _default ){    if( _string == undefined ) return _default;        // Cast to int    var i = parseInt(_string);        // Normalize    if( isNaN(i) ) i = _default;    if( i > _max) i = _max;    if( i <= _min ) i = _min;        return i;}